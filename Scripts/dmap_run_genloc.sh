# dmap_run_genloc.sh: script to run the gene location
# step on files generated by diffmeth.
#
# Peter Stockwell: Oct,Nov-2021


# needs a basic parameter file to specify positions of relevant
# executables and genome files. Also needs a parameter file specific to
# each diffmeth run to specify run type and mapping files and the
# criteria for accepting/rejecting fragments or regions.

# usage: ./dmap_run_genloc.sh <dmap_basic_params.sh> <genloc_run_parameters>

# check for parameter files:

if [[ -z $1 || -z $2 ]]; then

echo "This script needs two parameter files:";
echo " 1. Name of basic parameter file";
printf " 2. Name of genloc parameter file\n";

exit 1;

fi

# can we read this file?

if [[ ! -f "$1" ]]; then

  printf "Can't read basic parameter file '%s'\n" "$1";

  exit 1;

else

# pick up definitions from parameter file

. "$1";

fi

# check for genloc parameter file ($2)

if [[ ! -f "$2" ]]; then

  printf "Can't read genloc parameter file '%s'\n" "$2";

  exit 1;

else

# pick up sample definitions

. "$2";

fi


if [[ $verbose == "yes" ]]; then

printf "                   DMAP\n";
printf "    Differential Methylation Analysis Package\n";
printf "Running gene location on differential methylation data\n\n";
printf "  Basic parameters from '%s'\n" "$1";
printf "  Sample parameters from '%s'\n" "$2";

fi

# check for valid run type and appropriate file definitions

# define useful function(s)

function add_opt_and_value () {

# put an option ($1) and its value $2 into
# the command string

genloc_run_options="${genloc_run_options}"" ""$1"" ""$2";
}

function null_op () {
# to do nothing useful, but to avoid if then else fi sillyness
return 0;
}

# check for input file

if [[ ! -f "${genloc_input_file}" ]]; then

printf "Can\'t open genloc_input_file '%s'\n" "${genloc_input_file}";
exit 1;

else

# want to check for chr ids

if [[ $verbose == "yes" ]]; then

printf "Checking that chromosome ID's match between diffmeth output and annotation\n";

fi

dm_chr_id=`head -2 "${genloc_input_file}" | tail -1 | cut -f 1`

  if [[ $dm_chr_id == "chr"* ]]; then

    dm_chr_id_has_chr="yes";

  else

  dm_chr_id_has_chr="no";

  fi

fi

# need to check for chr ids in annotation file:

case ${feature_annotation_type} in

  Genbank | EMBL | SeqMonk)

    annot_chr_id=`head -1 "${annotation_file_location}""${annotation_files[0]}" | awk '{split($2,s2,":");print s2[2];}'`;

;;

  GFF3|GTF)

cat << 'FIND_ANN_ID' > find_ann_id.awk
$1!~/#/{print $1;
exit;
}
FIND_ANN_ID

  annot_chr_id=`awk -f find_ann_id.awk "${annotation_file_location}""${annotation_files[@]}"`

;;

esac

if [[ $annot_chr_id == "chr"* ]]; then

  annot_chr_id_has_chr="yes";

else

  annot_chr_id_has_chr="no";

fi

if [[ $dm_chr_id_has_chr != $annot_chr_id_has_chr ]]; then

  revised_input_file="${genloc_input_file}"".revised";

  if [[ $verbose == "yes" ]]; then
    printf "They don't: revising input file '%s' to '%s'\n" "${genloc_input_file}" "${revised_input_file}";
  fi
  

  if [[ $annot_chr_id_has_chr == "yes" ]]; then

    awk '$1~/#/{print $0;}$1!~/#/{printf("chr%s\n",$0);}' "${genloc_input_file}" > "${revised_input_file}";

  else

    awk '$1~/#/{print $0;}$1!~/#/{print substr($0,4);}'  "${genloc_input_file}" > "${revised_input_file}";

  fi

  genloc_input_file="${revised_input_file}";

fi

# set some basic parameters for identgeneloc

# how many columns in input file??

if [[ ${genloc_column_number}==0 ]]; then

genloc_column_number=`head -2 "${genloc_input_file}" | tail -1 | awk '{print NF;}'`;

fi

genloc_run_options="";

add_opt_and_value "-C" "${genloc_column_number}";

# echo ${genloc_run_options};

case ${feature_annotation_type} in

  Genbank)
    add_opt_and_value "-g -G" "${dmap_annot_info_file}";
;;
  EMBL)
    add_opt_and_value "-e -G" "${dmap_annot_info_file}";
;;
  SeqMonk)
    add_opt_and_value "-Q -G" "${dmap_annot_info_file}";
;;
  GFF3)
    add_opt_and_value "-F -f" "${annotation_file_location}""${annotation_files[@]}";
;;
  GTF)
    add_opt_and_value "-T -f" "${annotation_file_location}""${annotation_files[@]}";
;;

esac;

case ${internal_to_genes} in

  internal)
    add_opt_and_value "-I" "";
;;
  exon_intron)
    add_opt_and_value "-i" "";
;;
  *)
;;

esac;

case ${feature_annotation_type} in

  SeqMonk)
    if [[ ${show_TSS}=="yes" ]]; then
      add_opt_and_value "-t" "";
      if [[ ${TSS_limit}>0 ]]; then
        add_opt_and_value "-D" "${TSS_limit}";
      fi
    fi
    if [[ ${show_CpGi}=="yes" ]]; then
      if [[ ${show_CpGi_internal}=="yes" ]]; then
        add_opt_and_value "-u" "";
      else
        add_opt_and_value "-U" "";
      fi
    fi
    if [[ ${show_TSS_CpGi_ranges}=="yes" ]]; then
      add_opt_and_value "-R" "";
    fi
    if [[ ${#genloc_seqmonk_biotypes[@]} > 0 ]]; then
      for biotype in "${genloc_seqmonk_biotypes[@]}"; do
        add_opt_and_value "-B" "$biotype";
      done
    fi
;;
  GFF3 | GTF)
    if [[ ${#genloc_GTF_attributes[@]} > 0 ]]; then
      for gtfattr in "${genloc_GTF_attributes[@]}"; do
        add_opt_and_value "-A" "$gtfattr";
      done
    fi
    if [[ ${#genloc_GTF_featuretypes[@]} > 0 ]]; then
      for gtffeattype in "${genloc_GTF_featuretypes[@]}"; do
        add_opt_and_value "-a" "$gtffeattype";
      done
    fi
;;

  *)
;;

esac;
 
add_opt_and_value "-r" "${genloc_input_file}";

genloc_run_cmd="${path_to_dmap}""identgeneloc ""${genloc_run_options}";

if [[ $verbose == "yes" ]]; then

  printf "Executing: %s\n" "${genloc_run_cmd}";

fi

if [[ -n "${genloc_output_file}" ]]; then

${genloc_run_cmd} > "${genloc_output_file}";

# null_op;

else

${genloc_run_cmd};

# null_op;

fi

# echo "${genloc_run_cmd}";

exit 0;
